/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 爱享到 API
 * 你可以通过这里来了解 [OpenAPI 的语法](https://swagger.io/docs/specification/about/)。还可以通过 [Best Practices in API Design](https://swagger.io/resources/articles/best-practices-in-api-design/) 了解设计 API 的最佳实践。     For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: zhujh@wangushengshi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.aixiangdao.tech/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AddAddress
 */
export interface AddAddress {
    /**
     * 联系人姓名
     * @type {string}
     * @memberof AddAddress
     */
    contactName?: string;
    /**
     * 联系人电话
     * @type {string}
     * @memberof AddAddress
     */
    contactMobile?: string;
    /**
     * 省份id
     * @type {number}
     * @memberof AddAddress
     */
    province?: number;
    /**
     * 城市id
     * @type {number}
     * @memberof AddAddress
     */
    city?: number;
    /**
     * 区域id
     * @type {number}
     * @memberof AddAddress
     */
    area?: number;
    /**
     * 详细地址
     * @type {string}
     * @memberof AddAddress
     */
    address?: string;
    /**
     * 是否设置为默认值（0：否；1：是）
     * @type {number}
     * @memberof AddAddress
     */
    isDefault?: number;
}

/**
 * 
 * @export
 * @interface AddAddressRes
 */
export interface AddAddressRes {
    /**
     * 地址id
     * @type {number}
     * @memberof AddAddressRes
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 地址id  更新地址的时候才需要传
     * @type {number}
     * @memberof Address
     */
    id?: number;
    /**
     * 联系人姓名
     * @type {string}
     * @memberof Address
     */
    contactName?: string;
    /**
     * 联系人电话
     * @type {string}
     * @memberof Address
     */
    contactMobile?: string;
    /**
     * 省份id
     * @type {number}
     * @memberof Address
     */
    province?: number;
    /**
     * 城市id
     * @type {number}
     * @memberof Address
     */
    city?: number;
    /**
     * 区域id
     * @type {number}
     * @memberof Address
     */
    area?: number;
    /**
     * 详细地址
     * @type {string}
     * @memberof Address
     */
    address?: string;
    /**
     * 是否设置为默认值（0：否；1：是）
     * @type {number}
     * @memberof Address
     */
    isDefault?: number;
    /**
     * 省份名
     * @type {string}
     * @memberof Address
     */
    provinceName?: string;
    /**
     * 城市名
     * @type {string}
     * @memberof Address
     */
    cityName?: string;
    /**
     * 区域名
     * @type {string}
     * @memberof Address
     */
    areaName?: string;
}

/**
 * 
 * @export
 * @interface Area
 */
export interface Area {
    /**
     * 区域ID
     * @type {number}
     * @memberof Area
     */
    id?: number;
    /**
     * 区域名称
     * @type {string}
     * @memberof Area
     */
    name?: string;
    /**
     * 城市ID
     * @type {number}
     * @memberof Area
     */
    cityId?: number;
    /**
     * 
     * @type {Array<Region>}
     * @memberof Area
     */
    regions?: Array<Region>;
}

/**
 * 
 * @export
 * @interface Banner
 */
export interface Banner {
    /**
     * ID
     * @type {number}
     * @memberof Banner
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof Banner
     */
    name?: string;
    /**
     * 链接地址
     * @type {string}
     * @memberof Banner
     */
    linkUrl?: string;
    /**
     * 封面图片路径
     * @type {string}
     * @memberof Banner
     */
    coverPath?: string;
}

/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 类型(2 - 获取注册登录验证码; 4 - 获取修改手机号验证码; 5-获取绑定新手机验证码; 6-重置密码获取验证码)
     * @type {number}
     * @memberof Body
     */
    type: Body.TypeEnum;
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof Body
     */
    mobile: string;
}

/**
 * @export
 * @namespace Body
 */
export namespace Body {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NUMBER_2 = <any> 2,
        NUMBER_4 = <any> 4,
        NUMBER_5 = <any> 5,
        NUMBER_6 = <any> 6
    }
}

/**
 * 
 * @export
 * @interface Body1
 */
export interface Body1 {
    /**
     * 用户名
     * @type {string}
     * @memberof Body1
     */
    name?: string;
    /**
     * 性别 1:男;2:女
     * @type {number}
     * @memberof Body1
     */
    sex?: Body1.SexEnum;
    /**
     * 生日 yyyy-MM-dd
     * @type {Date}
     * @memberof Body1
     */
    birthday?: Date;
}

/**
 * @export
 * @namespace Body1
 */
export namespace Body1 {
    /**
     * @export
     * @enum {string}
     */
    export enum SexEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2
    }
}

/**
 * 
 * @export
 * @interface Body10
 */
export interface Body10 {
    /**
     * 积分类型（0：全部；1：收入；2：支出）
     * @type {number}
     * @memberof Body10
     */
    pointsType?: number;
    /**
     * 分页索引
     * @type {number}
     * @memberof Body10
     */
    pageIndex?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof Body10
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface Body11
 */
export interface Body11 {
    /**
     * 积分来源（0：签到；1：优惠买单；2商品买单）
     * @type {number}
     * @memberof Body11
     */
    pointSource?: number;
    /**
     * 积分来源记录ID
     * @type {number}
     * @memberof Body11
     */
    pointSourceId?: number;
    /**
     * 积分数量
     * @type {number}
     * @memberof Body11
     */
    point?: number;
    /**
     * 用户ID
     * @type {number}
     * @memberof Body11
     */
    userId?: number;
}

/**
 * 
 * @export
 * @interface Body12
 */
export interface Body12 {
    /**
     * 城市id
     * @type {number}
     * @memberof Body12
     */
    cityId: number;
}

/**
 * 
 * @export
 * @interface Body13
 */
export interface Body13 {
    /**
     * 经度
     * @type {number}
     * @memberof Body13
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof Body13
     */
    latitude?: number;
}

/**
 * 
 * @export
 * @interface Body14
 */
export interface Body14 {
    /**
     * 城市id
     * @type {number}
     * @memberof Body14
     */
    cityId: number;
}

/**
 * 
 * @export
 * @interface Body15
 */
export interface Body15 {
    /**
     * 城市ID
     * @type {number}
     * @memberof Body15
     */
    cityId?: number;
    /**
     * 区域ID
     * @type {number}
     * @memberof Body15
     */
    regionId?: number;
    /**
     * 距离(单位：m)
     * @type {number}
     * @memberof Body15
     */
    distance?: number;
    /**
     * 分类ID
     * @type {number}
     * @memberof Body15
     */
    categoryId?: number;
    /**
     * 经度(用户所在经度 或 地图Api返回的经度)
     * @type {number}
     * @memberof Body15
     */
    longitude?: number;
    /**
     * 纬度(用户所在纬度 或 地图Api返回的纬度)
     * @type {number}
     * @memberof Body15
     */
    latitude?: number;
    /**
     * 专题(场景)ID
     * @type {number}
     * @memberof Body15
     */
    topicId?: number;
    /**
     * 搜索关键字类型(为\"default\"表示未选择推荐关键字)
     * @type {string}
     * @memberof Body15
     */
    keywordType?: Body15.KeywordTypeEnum;
    /**
     * 搜索关键字(包括商家ID、商家名称、分类（菜系）ID、商圈ID、菜名等)
     * @type {string}
     * @memberof Body15
     */
    keyword?: string;
    /**
     * 排序字段(\"default\"-默认排序; \"averageConsume\"-人均消费; \"commentLevel\"-评分最高; \"monthOrderCount\"-月销量最高; \"distance\"-离我最近; \"sortOrder\"-店铺排序;)
     * @type {string}
     * @memberof Body15
     */
    sortBy?: Body15.SortByEnum;
    /**
     * 排序方式(\"desc\"-降序; \"asc\"-升序;)
     * @type {string}
     * @memberof Body15
     */
    order?: Body15.OrderEnum;
    /**
     * 是否为Plus店铺（0：非Plus店铺；1：Plus店铺）
     * @type {number}
     * @memberof Body15
     */
    isPlus?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body15
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body15
     */
    pageSize?: number;
}

/**
 * @export
 * @namespace Body15
 */
export namespace Body15 {
    /**
     * @export
     * @enum {string}
     */
    export enum KeywordTypeEnum {
        Default = <any> 'default',
        Category = <any> 'category',
        Area = <any> 'area',
        Region = <any> 'region',
        Dish = <any> 'dish',
        Merchant = <any> 'merchant'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SortByEnum {
        Default = <any> 'default',
        AverageConsume = <any> 'averageConsume',
        CommentLevel = <any> 'commentLevel',
        MonthOrderCount = <any> 'monthOrderCount',
        Distance = <any> 'distance',
        SortOrder = <any> 'sortOrder'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderEnum {
        Desc = <any> 'desc',
        Asc = <any> 'asc'
    }
}

/**
 * 
 * @export
 * @interface Body16
 */
export interface Body16 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body16
     */
    merchantId: number;
    /**
     * 经度
     * @type {number}
     * @memberof Body16
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof Body16
     */
    latitude?: number;
}

/**
 * 
 * @export
 * @interface Body17
 */
export interface Body17 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body17
     */
    merchantId: number;
}

/**
 * 
 * @export
 * @interface Body18
 */
export interface Body18 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body18
     */
    merchantId: number;
}

/**
 * 
 * @export
 * @interface Body19
 */
export interface Body19 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body19
     */
    merchantId: number;
}

/**
 * 
 * @export
 * @interface Body2
 */
export interface Body2 {
    /**
     * 密码
     * @type {string}
     * @memberof Body2
     */
    oldPassword: string;
    /**
     * 密码
     * @type {string}
     * @memberof Body2
     */
    newPassword: string;
}

/**
 * 
 * @export
 * @interface Body20
 */
export interface Body20 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body20
     */
    merchantId: number;
}

/**
 * 
 * @export
 * @interface Body21
 */
export interface Body21 {
    /**
     * 是否为热门城市(\"default\"-全部城市; \"true\"-热门城市; \"false\"-其他城市)
     * @type {string}
     * @memberof Body21
     */
    isHot?: Body21.IsHotEnum;
}

/**
 * @export
 * @namespace Body21
 */
export namespace Body21 {
    /**
     * @export
     * @enum {string}
     */
    export enum IsHotEnum {
        Default = <any> 'default',
        True = <any> 'true',
        False = <any> 'false'
    }
}

/**
 * 
 * @export
 * @interface Body22
 */
export interface Body22 {
    /**
     * 城市ID
     * @type {number}
     * @memberof Body22
     */
    cityId: number;
}

/**
 * 
 * @export
 * @interface Body23
 */
export interface Body23 {
    /**
     * 城市ID
     * @type {number}
     * @memberof Body23
     */
    cityId?: number;
    /**
     * 搜索关键字
     * @type {string}
     * @memberof Body23
     */
    searchTip?: string;
    /**
     * 经度
     * @type {number}
     * @memberof Body23
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof Body23
     */
    latitude?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body23
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body23
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface Body24
 */
export interface Body24 {
    /**
     * 城市ID
     * @type {number}
     * @memberof Body24
     */
    cityId?: number;
    /**
     * 搜索关键字
     * @type {string}
     * @memberof Body24
     */
    searchTip?: string;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body24
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body24
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface Body25
 */
export interface Body25 {
    /**
     * 商家ID
     * @type {number}
     * @memberof Body25
     */
    merchantId?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body25
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body25
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface Body26
 */
export interface Body26 {
    /**
     * 商品ID
     * @type {number}
     * @memberof Body26
     */
    productId: number;
}

/**
 * 
 * @export
 * @interface Body27
 */
export interface Body27 {
    /**
     * 商品ID
     * @type {number}
     * @memberof Body27
     */
    productId: number;
}

/**
 * 
 * @export
 * @interface Body28
 */
export interface Body28 {
    /**
     * 商品ID
     * @type {number}
     * @memberof Body28
     */
    productId: number;
}

/**
 * 
 * @export
 * @interface Body29
 */
export interface Body29 {
    /**
     * 验证码
     * @type {string}
     * @memberof Body29
     */
    code: string;
    /**
     * 新手机号
     * @type {string}
     * @memberof Body29
     */
    mobile: string;
    /**
     * 新密码传明文
     * @type {string}
     * @memberof Body29
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface Body3
 */
export interface Body3 {
    /**
     * 地址id
     * @type {number}
     * @memberof Body3
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface Body30
 */
export interface Body30 {
    /**
     * 类型(1:微信)
     * @type {number}
     * @memberof Body30
     */
    type?: number;
    /**
     * 第三方平台openid
     * @type {string}
     * @memberof Body30
     */
    openId?: string;
    /**
     * 手机号码
     * @type {string}
     * @memberof Body30
     */
    mobile?: string;
    /**
     * 短信验证码
     * @type {string}
     * @memberof Body30
     */
    verifyCode?: string;
}

/**
 * 
 * @export
 * @interface Body31
 */
export interface Body31 {
    /**
     * 状态状态 空为全部订单 (0.待支付1.待使用2.待评价3.退款中4.退款成功5.已取消)
     * @type {number}
     * @memberof Body31
     */
    status?: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body31
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body31
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface Body32
 */
export interface Body32 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body32
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body33
 */
export interface Body33 {
    /**
     * 退款Id
     * @type {number}
     * @memberof Body33
     */
    refundId?: number;
}

/**
 * 
 * @export
 * @interface Body34
 */
export interface Body34 {
    /**
     * 订单Id
     * @type {string}
     * @memberof Body34
     */
    orderId?: string;
    /**
     * 退款原因
     * @type {string}
     * @memberof Body34
     */
    reason?: string;
    /**
     * 消费券id数组
     * @type {Array<string>}
     * @memberof Body34
     */
    ids?: Array<string>;
}

/**
 * 
 * @export
 * @interface Body35
 */
export interface Body35 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body35
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body36
 */
export interface Body36 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body36
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body37
 */
export interface Body37 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body37
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body38
 */
export interface Body38 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body38
     */
    orderId?: number;
    /**
     * 支付方式Id
     * @type {number}
     * @memberof Body38
     */
    payWayId?: number;
}

/**
 * 
 * @export
 * @interface Body39
 */
export interface Body39 {
    /**
     * 订单Id
     * @type {number}
     * @memberof Body39
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body4
 */
export interface Body4 {
    /**
     * 地址id
     * @type {number}
     * @memberof Body4
     */
    id: number;
}

/**
 * 
 * @export
 * @interface Body40
 */
export interface Body40 {
    /**
     * 购买记录id
     * @type {number}
     * @memberof Body40
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Body41
 */
export interface Body41 {
    /**
     * 商家id
     * @type {string}
     * @memberof Body41
     */
    merchantId: string;
}

/**
 * 
 * @export
 * @interface Body5
 */
export interface Body5 {
    /**
     * 验证码
     * @type {string}
     * @memberof Body5
     */
    code: string;
}

/**
 * 
 * @export
 * @interface Body6
 */
export interface Body6 {
    /**
     * 验证码
     * @type {string}
     * @memberof Body6
     */
    code: string;
    /**
     * 新手机号
     * @type {string}
     * @memberof Body6
     */
    mobile: string;
}

/**
 * 
 * @export
 * @interface Body7
 */
export interface Body7 {
    /**
     * 头像文件
     * @type {string}
     * @memberof Body7
     */
    fileContent: string;
    /**
     * 文件名
     * @type {string}
     * @memberof Body7
     */
    fileName: string;
}

/**
 * 
 * @export
 * @interface Body8
 */
export interface Body8 {
    /**
     * 城市id
     * @type {number}
     * @memberof Body8
     */
    cityId: number;
}

/**
 * 
 * @export
 * @interface Body9
 */
export interface Body9 {
    /**
     * 城市id
     * @type {number}
     * @memberof Body9
     */
    cityId: number;
    /**
     * 分页游标（初始值：0）
     * @type {number}
     * @memberof Body9
     */
    pageIndex?: number;
    /**
     * 每页数目
     * @type {number}
     * @memberof Body9
     */
    pageSize?: number;
}

/**
 * 
 * @export
 * @interface BuyPlus
 */
export interface BuyPlus {
    /**
     * plus类型
     * @type {number}
     * @memberof BuyPlus
     */
    plusType?: number;
    /**
     * 支付方式Id
     * @type {number}
     * @memberof BuyPlus
     */
    payWayId?: number;
}

/**
 * 
 * @export
 * @interface BuyPlusInfo
 */
export interface BuyPlusInfo {
    /**
     * 
     * @type {PrePayInfoWechatPay}
     * @memberof BuyPlusInfo
     */
    wechatPay?: PrePayInfoWechatPay;
    /**
     * 阿里支付
     * @type {string}
     * @memberof BuyPlusInfo
     */
    aliPay?: string;
    /**
     * plus购买记录id
     * @type {number}
     * @memberof BuyPlusInfo
     */
    orderId?: number;
}

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 分类ID
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * 分类名称
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * 图标路径
     * @type {string}
     * @memberof Category
     */
    iconPath?: string;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    children?: Category;
}

/**
 * 
 * @export
 * @interface City
 */
export interface City {
    /**
     * 城市ID
     * @type {number}
     * @memberof City
     */
    id?: number;
    /**
     * 城市名称
     * @type {string}
     * @memberof City
     */
    name?: string;
    /**
     * 城市拼音
     * @type {string}
     * @memberof City
     */
    phoneticize?: string;
    /**
     * 省份ID
     * @type {number}
     * @memberof City
     */
    provinceId?: number;
    /**
     * 
     * @type {Array<Area>}
     * @memberof City
     */
    areas?: Array<Area>;
}

/**
 * 
 * @export
 * @interface CommonLoginInfo
 */
export interface CommonLoginInfo {
    /**
     * 用户登录类型: 1:账号密码登录; 2:手机快捷登录；3:微信登录
     * @type {number}
     * @memberof CommonLoginInfo
     */
    type: CommonLoginInfo.TypeEnum;
    /**
     * 邀请码
     * @type {string}
     * @memberof CommonLoginInfo
     */
    inviteCode?: string;
    /**
     * 所在省名称
     * @type {string}
     * @memberof CommonLoginInfo
     */
    province?: string;
    /**
     * 所在市名称
     * @type {string}
     * @memberof CommonLoginInfo
     */
    city?: string;
}

/**
 * @export
 * @namespace CommonLoginInfo
 */
export namespace CommonLoginInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3
    }
}

/**
 * 
 * @export
 * @interface Coupon
 */
export interface Coupon {
    /**
     * 优惠券id
     * @type {number}
     * @memberof Coupon
     */
    id?: number;
    /**
     * 是否可用  1可用0不可用
     * @type {string}
     * @memberof Coupon
     */
    status?: Coupon.StatusEnum;
    /**
     * 不可用原因
     * @type {string}
     * @memberof Coupon
     */
    reason?: string;
    /**
     * 优惠券名称
     * @type {string}
     * @memberof Coupon
     */
    name?: string;
    /**
     * 优惠券类型(1消费优惠券2活动优惠券)
     * @type {string}
     * @memberof Coupon
     */
    type?: Coupon.TypeEnum;
    /**
     * 使用门槛
     * @type {number}
     * @memberof Coupon
     */
    useMinimumComsumption?: number;
    /**
     * 面值
     * @type {number}
     * @memberof Coupon
     */
    money?: number;
    /**
     * 使用有效期(开始时间)
     * @type {string}
     * @memberof Coupon
     */
    useStartTime?: string;
    /**
     * 使用有效期(结束时间)
     * @type {string}
     * @memberof Coupon
     */
    useEndTime?: string;
}

/**
 * @export
 * @namespace Coupon
 */
export namespace Coupon {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _0 = <any> '0',
        _1 = <any> '1'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        _1 = <any> '1',
        _2 = <any> '2'
    }
}

/**
 * 
 * @export
 * @interface EmptyResult
 */
export interface EmptyResult {
    /**
     * 
     * @type {boolean}
     * @memberof EmptyResult
     */
    data?: boolean;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200Data}
     * @memberof InlineResponse200
     */
    data?: InlineResponse200Data;
}

/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 积分
     * @type {number}
     * @memberof InlineResponse2001
     */
    point?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse20010
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {Array<City>}
     * @memberof InlineResponse20011
     */
    data?: Array<City>;
}

/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {Array<Area>}
     * @memberof InlineResponse20012
     */
    data?: Array<Area>;
}

/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {InlineResponse20013Data}
     * @memberof InlineResponse20013
     */
    data?: InlineResponse20013Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20013Data
 */
export interface InlineResponse20013Data {
    /**
     * 推荐关键字列表
     * @type {Array<Keyword>}
     * @memberof InlineResponse20013Data
     */
    keywords?: Array<Keyword>;
    /**
     * 
     * @type {Page}
     * @memberof InlineResponse20013Data
     */
    page?: Page;
}

/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {InlineResponse20014Data}
     * @memberof InlineResponse20014
     */
    data?: InlineResponse20014Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20014Data
 */
export interface InlineResponse20014Data {
    /**
     * 热门搜索关键字列表
     * @type {Array<Keyword>}
     * @memberof InlineResponse20014Data
     */
    keywords?: Array<Keyword>;
    /**
     * 
     * @type {Page}
     * @memberof InlineResponse20014Data
     */
    page?: Page;
}

/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse20015
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 会员列表
     * @type {Array<PlusMemberType>}
     * @memberof InlineResponse20016
     */
    data?: Array<PlusMemberType>;
}

/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 结果信息
     * @type {Array<Province>}
     * @memberof InlineResponse20017
     */
    data?: Array<Province>;
}

/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {OrderSimpleInfo}
     * @memberof InlineResponse20018
     */
    data?: OrderSimpleInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {OrderInfo}
     * @memberof InlineResponse20019
     */
    data?: OrderInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 积分列表
     * @type {Array<PointsDetail>}
     * @memberof InlineResponse2002
     */
    data?: Array<PointsDetail>;
}

/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {RefundInfo}
     * @memberof InlineResponse20020
     */
    data?: RefundInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {RefundList}
     * @memberof InlineResponse20021
     */
    data?: RefundList;
}

/**
 * 
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {PrePayInfo}
     * @memberof InlineResponse20022
     */
    data?: PrePayInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * 
     * @type {InlineResponse20023Data}
     * @memberof InlineResponse20023
     */
    data?: InlineResponse20023Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20023Data
 */
export interface InlineResponse20023Data {
    /**
     * 支付状态 (0:待支付1:支付成功2:支付中3:取消支付4:支付失败)
     * @type {number}
     * @memberof InlineResponse20023Data
     */
    payStatus?: number;
    /**
     * 积分
     * @type {number}
     * @memberof InlineResponse20023Data
     */
    point?: number;
    /**
     * 实际支付价格
     * @type {number}
     * @memberof InlineResponse20023Data
     */
    actualMoney?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * 
     * @type {BuyPlusInfo}
     * @memberof InlineResponse20024
     */
    data?: BuyPlusInfo;
}

/**
 * 
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {InlineResponse20025Data}
     * @memberof InlineResponse20025
     */
    data?: InlineResponse20025Data;
}

/**
 * 
 * @export
 * @interface InlineResponse20025Data
 */
export interface InlineResponse20025Data {
    /**
     * 支付状态 (0:待支付1:支付成功2:支付中3:取消支付4:支付失败)
     * @type {number}
     * @memberof InlineResponse20025Data
     */
    payStatus?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
    /**
     * 支付方式
     * @type {Array<PayWay>}
     * @memberof InlineResponse20026
     */
    data?: Array<PayWay>;
}

/**
 * 
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
    /**
     * 优惠券
     * @type {Array<Coupon>}
     * @memberof InlineResponse20027
     */
    data?: Array<Coupon>;
}

/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 增加的积分数量
     * @type {number}
     * @memberof InlineResponse2003
     */
    point?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {City}
     * @memberof InlineResponse2004
     */
    data?: City;
}

/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse2005
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 结果信息
     * @type {Array<MerchantDetail>}
     * @memberof InlineResponse2006
     */
    data?: Array<MerchantDetail>;
}

/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {InlineResponse2007Data}
     * @memberof InlineResponse2007
     */
    data?: InlineResponse2007Data;
}

/**
 * 
 * @export
 * @interface InlineResponse2007Data
 */
export interface InlineResponse2007Data {
    /**
     * 详情内容
     * @type {string}
     * @memberof InlineResponse2007Data
     */
    detail?: string;
}

/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse2008
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {any}
     * @memberof InlineResponse2009
     */
    data?: any;
}

/**
 * 
 * @export
 * @interface InlineResponse200Data
 */
export interface InlineResponse200Data {
    /**
     * 
     * @type {User}
     * @memberof InlineResponse200Data
     */
    user?: User;
    /**
     * 用户 token , 用来验证用于 auth 信息
     * @type {string}
     * @memberof InlineResponse200Data
     */
    userToken?: string;
}

/**
 * 
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     * 关键字类型(\"category\"-菜系; \"area\"-区域; \"region\"-\"商圈\"; \"dish\"-菜品;  \"merchant\"-商家)
     * @type {string}
     * @memberof Keyword
     */
    type?: Keyword.TypeEnum;
    /**
     * 关键字ID
     * @type {string}
     * @memberof Keyword
     */
    id?: string;
    /**
     * 关键字
     * @type {string}
     * @memberof Keyword
     */
    name?: string;
    /**
     * 
     * @type {KeywordExt}
     * @memberof Keyword
     */
    ext?: KeywordExt;
}

/**
 * @export
 * @namespace Keyword
 */
export namespace Keyword {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Category = <any> 'category',
        Area = <any> 'area',
        Region = <any> 'region',
        Dish = <any> 'dish',
        Merchant = <any> 'merchant'
    }
}

/**
 * 商家相关信息, 当type == \"merchant\"时有效
 * @export
 * @interface KeywordExt
 */
export interface KeywordExt {
    /**
     * 菜系
     * @type {string}
     * @memberof KeywordExt
     */
    categoryName?: string;
    /**
     * 地址
     * @type {string}
     * @memberof KeywordExt
     */
    address?: string;
    /**
     * 距离(km)
     * @type {number}
     * @memberof KeywordExt
     */
    distance?: number;
    /**
     * 菜名
     * @type {string}
     * @memberof KeywordExt
     */
    dishName?: string;
    /**
     * 是否能优惠买单(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof KeywordExt
     */
    isDiscount?: string;
    /**
     * 是否有优惠券(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof KeywordExt
     */
    hasCoupon?: string;
}

/**
 * 
 * @export
 * @interface MerchantAttachment
 */
export interface MerchantAttachment {
    /**
     * 主键ID
     * @type {number}
     * @memberof MerchantAttachment
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof MerchantAttachment
     */
    name?: string;
    /**
     * 附件类型(\"picture\"-图片; \"panorama\"-全景图; \"vedio\"-视频;)
     * @type {string}
     * @memberof MerchantAttachment
     */
    type?: string;
    /**
     * 描述
     * @type {string}
     * @memberof MerchantAttachment
     */
    description?: string;
    /**
     * 附件资源路径
     * @type {string}
     * @memberof MerchantAttachment
     */
    attachUrl?: string;
}

/**
 * 
 * @export
 * @interface MerchantBrief
 */
export interface MerchantBrief {
    /**
     * 商家ID
     * @type {number}
     * @memberof MerchantBrief
     */
    id?: number;
    /**
     * 商家名称
     * @type {string}
     * @memberof MerchantBrief
     */
    name?: string;
    /**
     * 商家logo路径
     * @type {string}
     * @memberof MerchantBrief
     */
    logoPath?: string;
    /**
     * 封面图片路径
     * @type {string}
     * @memberof MerchantBrief
     */
    coverPath?: string;
    /**
     * 人均消费
     * @type {number}
     * @memberof MerchantBrief
     */
    averageConsume?: number;
    /**
     * 商圈名称
     * @type {string}
     * @memberof MerchantBrief
     */
    regionName?: string;
    /**
     * 分类名称
     * @type {string}
     * @memberof MerchantBrief
     */
    categoryName?: string;
    /**
     * 距离（单位：km）
     * @type {number}
     * @memberof MerchantBrief
     */
    distance?: number;
    /**
     * 星级评价
     * @type {number}
     * @memberof MerchantBrief
     */
    commentLevel?: number;
    /**
     * 推荐消费券信息
     * @type {string}
     * @memberof MerchantBrief
     */
    coupon?: string;
    /**
     * 推荐优惠买单信息
     * @type {number}
     * @memberof MerchantBrief
     */
    discountSetting?: number;
    /**
     * 是否是Plus店铺（0：非Plus店铺；1：Plus店铺）
     * @type {number}
     * @memberof MerchantBrief
     */
    isPlus?: number;
}

/**
 * 
 * @export
 * @interface MerchantComment
 */
export interface MerchantComment {
    /**
     * 评论ID
     * @type {number}
     * @memberof MerchantComment
     */
    id?: number;
    /**
     * 评论者用户名
     * @type {string}
     * @memberof MerchantComment
     */
    userName?: string;
    /**
     * 评论者头像地址
     * @type {string}
     * @memberof MerchantComment
     */
    userHeadImagePath?: string;
    /**
     * 菜品质量
     * @type {string}
     * @memberof MerchantComment
     */
    dishScore?: string;
    /**
     * 就餐环境
     * @type {string}
     * @memberof MerchantComment
     */
    environmentScore?: string;
    /**
     * 服务质量
     * @type {string}
     * @memberof MerchantComment
     */
    serviceScore?: string;
    /**
     * 评论内容
     * @type {string}
     * @memberof MerchantComment
     */
    content?: string;
    /**
     * 评论时间
     * @type {string}
     * @memberof MerchantComment
     */
    time?: string;
    /**
     * 评论图片地址集合
     * @type {Array<string>}
     * @memberof MerchantComment
     */
    picPaths?: Array<string>;
}

/**
 * 
 * @export
 * @interface MerchantDetail
 */
export interface MerchantDetail extends MerchantBrief {
    /**
     * 地址详情
     * @type {string}
     * @memberof MerchantDetail
     */
    detailAddress?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MerchantDetail
     */
    contactTels?: Array<string>;
    /**
     * 营业时间
     * @type {string}
     * @memberof MerchantDetail
     */
    businessTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MerchantDetail
     */
    recommandReasons?: Array<string>;
}

/**
 * 
 * @export
 * @interface MerchantDiscountSetting
 */
export interface MerchantDiscountSetting {
    /**
     * 主键ID
     * @type {number}
     * @memberof MerchantDiscountSetting
     */
    id?: number;
    /**
     * 售出折扣
     * @type {number}
     * @memberof MerchantDiscountSetting
     */
    outDiscount?: number;
}

/**
 * 
 * @export
 * @interface MerchantDish
 */
export interface MerchantDish {
    /**
     * 菜品ID
     * @type {number}
     * @memberof MerchantDish
     */
    id?: number;
    /**
     * 菜品名称
     * @type {string}
     * @memberof MerchantDish
     */
    name?: string;
    /**
     * 菜品价格
     * @type {number}
     * @memberof MerchantDish
     */
    price?: number;
    /**
     * 推荐指数
     * @type {number}
     * @memberof MerchantDish
     */
    recommandIndex?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof MerchantDish
     */
    picPath?: string;
}

/**
 * 
 * @export
 * @interface MerchantService
 */
export interface MerchantService {
    /**
     * 服务ID
     * @type {number}
     * @memberof MerchantService
     */
    id?: number;
    /**
     * 服务名称
     * @type {string}
     * @memberof MerchantService
     */
    name?: string;
    /**
     * 图标ID
     * @type {number}
     * @memberof MerchantService
     */
    iconFileId?: number;
    /**
     * 图标路径
     * @type {string}
     * @memberof MerchantService
     */
    iconPath?: string;
}

/**
 * 
 * @export
 * @interface MobilePasswordLoginInfo
 */
export interface MobilePasswordLoginInfo extends CommonLoginInfo {
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    mobile: string;
    /**
     * 密码
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    password: string;
    /**
     * 设备id
     * @type {string}
     * @memberof MobilePasswordLoginInfo
     */
    deviceId: string;
}

/**
 * @export
 * @namespace MobilePasswordLoginInfo
 */
export namespace MobilePasswordLoginInfo {
}

/**
 * 
 * @export
 * @interface MobileQuickLoginInfo
 */
export interface MobileQuickLoginInfo extends CommonLoginInfo {
    /**
     * 手机号（仅限大陆地区）
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    mobile: string;
    /**
     * 手机验证码
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    verifyCode: string;
    /**
     * 设备id
     * @type {string}
     * @memberof MobileQuickLoginInfo
     */
    deviceId: string;
}

/**
 * @export
 * @namespace MobileQuickLoginInfo
 */
export namespace MobileQuickLoginInfo {
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * http状态码
     * @type {number}
     * @memberof ModelError
     */
    httpCode: number;
    /**
     * 错误码信息。格式：{errorType}.{resourceName}.{reason}
     * @type {string}
     * @memberof ModelError
     */
    errorCode: string;
}

/**
 * 
 * @export
 * @interface OrderDetailInfo
 */
export interface OrderDetailInfo {
    /**
     * 订单详情Id
     * @type {string}
     * @memberof OrderDetailInfo
     */
    id?: string;
    /**
     * 券号
     * @type {string}
     * @memberof OrderDetailInfo
     */
    productSn?: string;
    /**
     * 退款状态(0:待退款 1:退款成功 2.审批通过退款中 3:第三方退款中 4:退款失败)
     * @type {number}
     * @memberof OrderDetailInfo
     */
    refundStatus?: number;
    /**
     * 退款Id
     * @type {number}
     * @memberof OrderDetailInfo
     */
    refundId?: number;
    /**
     * 能否退款
     * @type {boolean}
     * @memberof OrderDetailInfo
     */
    canRefund?: boolean;
    /**
     * 使用状态（0:未使用 1已使用）
     * @type {number}
     * @memberof OrderDetailInfo
     */
    useStatus?: number;
}

/**
 * 
 * @export
 * @interface OrderInfo
 */
export interface OrderInfo {
    /**
     * 订单id
     * @type {number}
     * @memberof OrderInfo
     */
    orderId?: number;
    /**
     * 订单号
     * @type {string}
     * @memberof OrderInfo
     */
    orderSn?: string;
    /**
     * 订单类型（1.优惠买单，2.商品购买）
     * @type {number}
     * @memberof OrderInfo
     */
    orderType?: number;
    /**
     * 状态(0.待支付1.待使用2.待评价3.退款中4.退款成功5.已取消)
     * @type {number}
     * @memberof OrderInfo
     */
    status?: number;
    /**
     * 原始总价
     * @type {number}
     * @memberof OrderInfo
     */
    totalMoney?: number;
    /**
     * 实际支付价格
     * @type {number}
     * @memberof OrderInfo
     */
    actualMoney?: number;
    /**
     * 优惠券金额
     * @type {number}
     * @memberof OrderInfo
     */
    couponMoney?: number;
    /**
     * 折扣金额
     * @type {number}
     * @memberof OrderInfo
     */
    discountMoney?: number;
    /**
     * 下单时间
     * @type {Date}
     * @memberof OrderInfo
     */
    createTime?: Date;
    /**
     * 手机号
     * @type {string}
     * @memberof OrderInfo
     */
    userMobile?: string;
    /**
     * 能否退款
     * @type {boolean}
     * @memberof OrderInfo
     */
    canRefund?: boolean;
    /**
     * 过期时间
     * @type {Date}
     * @memberof OrderInfo
     */
    expiryTime?: Date;
    /**
     * 
     * @type {OrderInfoMerchant}
     * @memberof OrderInfo
     */
    merchant?: OrderInfoMerchant;
    /**
     * 
     * @type {OrderInfoProduct}
     * @memberof OrderInfo
     */
    product?: OrderInfoProduct;
    /**
     * 
     * @type {Array<OrderDetailInfo>}
     * @memberof OrderInfo
     */
    orderDetails?: Array<OrderDetailInfo>;
}

/**
 * 
 * @export
 * @interface OrderInfoMerchant
 */
export interface OrderInfoMerchant {
    /**
     * 商家ID
     * @type {number}
     * @memberof OrderInfoMerchant
     */
    id?: number;
    /**
     * 商家名称
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    name?: string;
    /**
     * 商家地址
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    detailAddress?: string;
    /**
     * 经度
     * @type {number}
     * @memberof OrderInfoMerchant
     */
    longitude?: number;
    /**
     * 纬度
     * @type {number}
     * @memberof OrderInfoMerchant
     */
    latitude?: number;
    /**
     * logo地址
     * @type {string}
     * @memberof OrderInfoMerchant
     */
    logoPath?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderInfoMerchant
     */
    contactTels?: Array<string>;
}

/**
 * 
 * @export
 * @interface OrderInfoProduct
 */
export interface OrderInfoProduct {
    /**
     * 商品Id
     * @type {number}
     * @memberof OrderInfoProduct
     */
    id?: number;
    /**
     * 商品类型
     * @type {number}
     * @memberof OrderInfoProduct
     */
    type?: number;
    /**
     * 商品名称
     * @type {string}
     * @memberof OrderInfoProduct
     */
    name?: string;
    /**
     * 商品数量
     * @type {number}
     * @memberof OrderInfoProduct
     */
    quantity?: number;
    /**
     * 有效期至
     * @type {Date}
     * @memberof OrderInfoProduct
     */
    effectEndTime?: Date;
    /**
     * 市场价
     * @type {number}
     * @memberof OrderInfoProduct
     */
    marketPrice?: number;
    /**
     * 优惠价
     * @type {number}
     * @memberof OrderInfoProduct
     */
    favorablePrice?: number;
}

/**
 * 
 * @export
 * @interface OrderSimpleInfo
 */
export interface OrderSimpleInfo {
    /**
     * 订单主表Id
     * @type {string}
     * @memberof OrderSimpleInfo
     */
    orderMainId?: string;
    /**
     * 订单号
     * @type {string}
     * @memberof OrderSimpleInfo
     */
    orderSn?: string;
}

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 是否有下一页(\"true\"-是; \"false\"-否;)
     * @type {string}
     * @memberof Page
     */
    hasNext?: string;
}

/**
 * 
 * @export
 * @interface PayWay
 */
export interface PayWay {
    /**
     * id
     * @type {number}
     * @memberof PayWay
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof PayWay
     */
    name?: string;
    /**
     * 支付方式iconUrl
     * @type {string}
     * @memberof PayWay
     */
    iconUrl?: string;
    /**
     * 限额
     * @type {string}
     * @memberof PayWay
     */
    quota?: string;
    /**
     * 0禁用1启用
     * @type {number}
     * @memberof PayWay
     */
    status?: PayWay.StatusEnum;
}

/**
 * @export
 * @namespace PayWay
 */
export namespace PayWay {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}

/**
 * 
 * @export
 * @interface PlusMemberType
 */
export interface PlusMemberType {
    /**
     * 会员类型
     * @type {number}
     * @memberof PlusMemberType
     */
    type?: number;
    /**
     * 会员名称
     * @type {string}
     * @memberof PlusMemberType
     */
    name?: string;
    /**
     * 会员描述
     * @type {string}
     * @memberof PlusMemberType
     */
    description?: string;
    /**
     * 会员原价
     * @type {number}
     * @memberof PlusMemberType
     */
    originalPrice?: number;
    /**
     * 会员现价
     * @type {number}
     * @memberof PlusMemberType
     */
    currentPrice?: number;
    /**
     * 会员有效期
     * @type {number}
     * @memberof PlusMemberType
     */
    days?: number;
}

/**
 * 
 * @export
 * @interface PointsDetail
 */
export interface PointsDetail {
    /**
     * 积分来源名称
     * @type {string}
     * @memberof PointsDetail
     */
    title?: string;
    /**
     * 积分
     * @type {number}
     * @memberof PointsDetail
     */
    point?: number;
    /**
     * 积分创建时间
     * @type {Date}
     * @memberof PointsDetail
     */
    createTime?: Date;
}

/**
 * 
 * @export
 * @interface PrePayInfo
 */
export interface PrePayInfo {
    /**
     * 
     * @type {PrePayInfoWechatPay}
     * @memberof PrePayInfo
     */
    wechatPay?: PrePayInfoWechatPay;
    /**
     * 阿里支付
     * @type {string}
     * @memberof PrePayInfo
     */
    aliPay?: string;
}

/**
 * 微信支付
 * @export
 * @interface PrePayInfoWechatPay
 */
export interface PrePayInfoWechatPay {
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    _package?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    appid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    sign?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    partnerid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    prepayid?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    noncestr?: string;
    /**
     * 
     * @type {string}
     * @memberof PrePayInfoWechatPay
     */
    timestamp?: string;
}

/**
 * 
 * @export
 * @interface ProductBrief
 */
export interface ProductBrief {
    /**
     * 产品（消费券）ID
     * @type {number}
     * @memberof ProductBrief
     */
    id?: number;
    /**
     * 商品类型（1：代金券；2：套餐；3：会员卡）
     * @type {number}
     * @memberof ProductBrief
     */
    type?: number;
    /**
     * 产品（消费券）名称
     * @type {string}
     * @memberof ProductBrief
     */
    name?: string;
    /**
     * 使用开始时间
     * @type {string}
     * @memberof ProductBrief
     */
    effectStartTime?: string;
    /**
     * 使用结束时间
     * @type {string}
     * @memberof ProductBrief
     */
    effectEndTime?: string;
    /**
     * 可用时间描述
     * @type {string}
     * @memberof ProductBrief
     */
    availableTimeDesc?: string;
    /**
     * 原价
     * @type {number}
     * @memberof ProductBrief
     */
    marketPrice?: number;
    /**
     * 优惠价
     * @type {number}
     * @memberof ProductBrief
     */
    favorablePrice?: number;
}

/**
 * 
 * @export
 * @interface ProductContent
 */
export interface ProductContent {
    /**
     * 主键ID
     * @type {number}
     * @memberof ProductContent
     */
    id?: number;
    /**
     * 名称
     * @type {string}
     * @memberof ProductContent
     */
    name?: string;
    /**
     * 价格
     * @type {number}
     * @memberof ProductContent
     */
    price?: number;
    /**
     * 数量
     * @type {number}
     * @memberof ProductContent
     */
    count?: number;
    /**
     * 图片路径
     * @type {string}
     * @memberof ProductContent
     */
    picPath?: string;
}

/**
 * 
 * @export
 * @interface ProductDetail
 */
export interface ProductDetail extends ProductBrief {
    /**
     * 不可用时间描述
     * @type {string}
     * @memberof ProductDetail
     */
    unavailableTimeDesc?: string;
    /**
     * 使用规则
     * @type {Array<string>}
     * @memberof ProductDetail
     */
    useRules?: Array<string>;
}

/**
 * 
 * @export
 * @interface Province
 */
export interface Province {
    /**
     * 省份ID
     * @type {number}
     * @memberof Province
     */
    id?: number;
    /**
     * 省份名称
     * @type {string}
     * @memberof Province
     */
    name?: string;
    /**
     * 
     * @type {Array<City>}
     * @memberof Province
     */
    cities?: Array<City>;
}

/**
 * 
 * @export
 * @interface RefundInfo
 */
export interface RefundInfo {
    /**
     * 退款状态(0:待退款 1:退款成功 2.审批通过退款中 3:第三方退款中 4:退款失败)
     * @type {number}
     * @memberof RefundInfo
     */
    refundStatus?: number;
    /**
     * 总价
     * @type {number}
     * @memberof RefundInfo
     */
    money?: number;
    /**
     * 退回账户
     * @type {string}
     * @memberof RefundInfo
     */
    account?: string;
    /**
     * 申请时间
     * @type {Date}
     * @memberof RefundInfo
     */
    createTime?: Date;
    /**
     * 审核时间
     * @type {Date}
     * @memberof RefundInfo
     */
    auditTime?: Date;
    /**
     * 退款时间
     * @type {Date}
     * @memberof RefundInfo
     */
    payTime?: Date;
}

/**
 * 
 * @export
 * @interface RefundList
 */
export interface RefundList {
    /**
     * 退款状态(0:待退款 1:退款成功 2.审批通过退款中 3:第三方退款中 4:退款失败)
     * @type {number}
     * @memberof RefundList
     */
    status?: number;
    /**
     * 总价
     * @type {number}
     * @memberof RefundList
     */
    money?: number;
    /**
     * 退款id
     * @type {number}
     * @memberof RefundList
     */
    refundId?: number;
    /**
     * 预计到账时间
     * @type {string}
     * @memberof RefundList
     */
    receiveTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RefundList
     */
    productSn?: Array<string>;
}

/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 商圈ID
     * @type {number}
     * @memberof Region
     */
    id?: number;
    /**
     * 商圈名称
     * @type {string}
     * @memberof Region
     */
    name?: string;
    /**
     * 区域ID
     * @type {number}
     * @memberof Region
     */
    areaId?: number;
}

/**
 * 
 * @export
 * @interface SubmitOrder
 */
export interface SubmitOrder {
    /**
     * 商家Id
     * @type {number}
     * @memberof SubmitOrder
     */
    merchantId?: number;
    /**
     * 商家版本Id
     * @type {number}
     * @memberof SubmitOrder
     */
    merchantVersionId?: number;
    /**
     * 订单实际总额
     * @type {number}
     * @memberof SubmitOrder
     */
    totalMoney?: number;
    /**
     * 实际支付总额
     * @type {number}
     * @memberof SubmitOrder
     */
    actualMoney?: number;
    /**
     * 不参与优惠总额
     * @type {number}
     * @memberof SubmitOrder
     */
    outOfDiscountMoney?: number;
    /**
     * 优惠券Id
     * @type {number}
     * @memberof SubmitOrder
     */
    couponId?: number;
}

/**
 * 
 * @export
 * @interface SubmitProductOrder
 */
export interface SubmitProductOrder {
    /**
     * 商家Id
     * @type {number}
     * @memberof SubmitProductOrder
     */
    merchantId?: number;
    /**
     * 商家版本Id
     * @type {number}
     * @memberof SubmitProductOrder
     */
    merchantVersionId?: number;
    /**
     * 总金额
     * @type {number}
     * @memberof SubmitProductOrder
     */
    actualMoney?: number;
    /**
     * 商品Id
     * @type {number}
     * @memberof SubmitProductOrder
     */
    productId?: number;
    /**
     * 商品版本Id
     * @type {number}
     * @memberof SubmitProductOrder
     */
    productVersionId?: number;
    /**
     * 商品数量
     * @type {number}
     * @memberof SubmitProductOrder
     */
    productQuantity?: number;
}

/**
 * 
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 专题ID
     * @type {number}
     * @memberof Topic
     */
    id?: number;
    /**
     * 专题名称
     * @type {string}
     * @memberof Topic
     */
    name?: string;
    /**
     * 封面图片路径
     * @type {string}
     * @memberof Topic
     */
    coverPath?: string;
    /**
     * 广告语
     * @type {string}
     * @memberof Topic
     */
    slogan?: string;
}

/**
 * 用户结构
 * @export
 * @interface User
 */
export interface User {
    /**
     * 用户id
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 昵称
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof User
     */
    mobile?: string;
    /**
     * 会员等级
     * @type {string}
     * @memberof User
     */
    level?: string;
    /**
     * 头像路径
     * @type {string}
     * @memberof User
     */
    headPicture?: string;
    /**
     * 生日
     * @type {Date}
     * @memberof User
     */
    birthday?: Date;
    /**
     * 性别
     * @type {number}
     * @memberof User
     */
    sex?: number;
    /**
     * 用户积分总量
     * @type {number}
     * @memberof User
     */
    point?: number;
    /**
     * 用户plus状态 0:默认无开通 1.开通中 2已过期
     * @type {number}
     * @memberof User
     */
    plusStatus?: number;
    /**
     * 用户plus过期时间
     * @type {Date}
     * @memberof User
     */
    plusEndTime?: Date;
    /**
     * 用户是否签到
     * @type {boolean}
     * @memberof User
     */
    isSign?: boolean;
    /**
     * 待支付数量
     * @type {number}
     * @memberof User
     */
    waitPayCount?: number;
    /**
     * 待使用数量
     * @type {number}
     * @memberof User
     */
    waitUseCount?: number;
    /**
     * 退款中数量
     * @type {number}
     * @memberof User
     */
    refundingCount?: number;
}

/**
 * 
 * @export
 * @interface WechatLoginInfo
 */
export interface WechatLoginInfo extends CommonLoginInfo {
    /**
     * 
     * @type {string}
     * @memberof WechatLoginInfo
     */
    openId: string;
    /**
     * 第三方平台昵称
     * @type {string}
     * @memberof WechatLoginInfo
     */
    nikeName: string;
    /**
     * 第三方平台性别(普通用户性别，1为男性，2为女性)
     * @type {string}
     * @memberof WechatLoginInfo
     */
    sex: string;
    /**
     * 第三方平台头像
     * @type {string}
     * @memberof WechatLoginInfo
     */
    headerImg: string;
    /**
     * 微信unionid(用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。)
     * @type {string}
     * @memberof WechatLoginInfo
     */
    unionId: string;
    /**
     * 
     * @type {string}
     * @memberof WechatLoginInfo
     */
    deviceId?: string;
}

/**
 * @export
 * @namespace WechatLoginInfo
 */
export namespace WechatLoginInfo {
}


/**
 * ActivityApi - fetch parameter creator
 * @export
 */
export const ActivityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {Body8} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: Body8, options: any = {}): FetchArgs {
            const localVarPath = `/getCityBanners`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body8" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body8 || {}) : (body8 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {Body8} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: Body8, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ActivityApiFetchParamCreator(configuration).getCityBanners(body8, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取城市轮播广告图(首页)
         * @param {Body8} [body8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityBanners(body8?: Body8, options?: any) {
            return ActivityApiFp(configuration).getCityBanners(body8, options)(fetch, basePath);
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取城市轮播广告图(首页)
     * @param {Body8} [body8] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public getCityBanners(body8?: Body8, options?: any) {
        return ActivityApiFp(this.configuration).getCityBanners(body8, options)(this.fetch, this.basePath);
    }

}

/**
 * BasicApi - fetch parameter creator
 * @export
 */
export const BasicApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {Body21} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body21?: Body21, options: any = {}): FetchArgs {
            const localVarPath = `/getCities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body21" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body21 || {}) : (body21 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {Body14} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body14?: Body14, options: any = {}): FetchArgs {
            const localVarPath = `/getCityTopics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body14" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body14 || {}) : (body14 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {Body24} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body24?: Body24, options: any = {}): FetchArgs {
            const localVarPath = `/getHotSearchTips`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body24" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body24 || {}) : (body24 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {Body13} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body13?: Body13, options: any = {}): FetchArgs {
            const localVarPath = `/getLocationCity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body13" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body13 || {}) : (body13 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options: any = {}): FetchArgs {
            const localVarPath = `/basic/getProvinces`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {Body23} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body23?: Body23, options: any = {}): FetchArgs {
            const localVarPath = `/getRecommandSearchTips`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body23" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body23 || {}) : (body23 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {Body22} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body22?: Body22, options: any = {}): FetchArgs {
            const localVarPath = `/getRegions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body22" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body22 || {}) : (body22 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicApi - functional programming interface
 * @export
 */
export const BasicApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {Body21} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body21?: Body21, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20011> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCities(body21, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {Body14} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body14?: Body14, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getCityTopics(body14, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {Body24} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body24?: Body24, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20014> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getHotSearchTips(body24, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {Body13} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body13?: Body13, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getLocationCity(body13, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20017> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getProvinces(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {Body23} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body23?: Body23, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20013> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getRecommandSearchTips(body23, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {Body22} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body22?: Body22, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20012> {
            const localVarFetchArgs = BasicApiFetchParamCreator(configuration).getRegions(body22, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicApi - factory interface
 * @export
 */
export const BasicApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取城市列表
         * @param {Body21} [body21] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(body21?: Body21, options?: any) {
            return BasicApiFp(configuration).getCities(body21, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取城市场景列表
         * @param {Body14} [body14] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityTopics(body14?: Body14, options?: any) {
            return BasicApiFp(configuration).getCityTopics(body14, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取热门搜索关键字列表
         * @param {Body24} [body24] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotSearchTips(body24?: Body24, options?: any) {
            return BasicApiFp(configuration).getHotSearchTips(body24, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端根据地理位置获取城市
         * @param {Body13} [body13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationCity(body13?: Body13, options?: any) {
            return BasicApiFp(configuration).getLocationCity(body13, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取省、市、区、商圈数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvinces(options?: any) {
            return BasicApiFp(configuration).getProvinces(options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取推荐关键字列表
         * @param {Body23} [body23] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommandSearchTips(body23?: Body23, options?: any) {
            return BasicApiFp(configuration).getRecommandSearchTips(body23, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取区域商圈列表
         * @param {Body22} [body22] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegions(body22?: Body22, options?: any) {
            return BasicApiFp(configuration).getRegions(body22, options)(fetch, basePath);
        },
    };
};

/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
export class BasicApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取城市列表
     * @param {Body21} [body21] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCities(body21?: Body21, options?: any) {
        return BasicApiFp(this.configuration).getCities(body21, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取城市场景列表
     * @param {Body14} [body14] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getCityTopics(body14?: Body14, options?: any) {
        return BasicApiFp(this.configuration).getCityTopics(body14, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取热门搜索关键字列表
     * @param {Body24} [body24] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getHotSearchTips(body24?: Body24, options?: any) {
        return BasicApiFp(this.configuration).getHotSearchTips(body24, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端根据地理位置获取城市
     * @param {Body13} [body13] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getLocationCity(body13?: Body13, options?: any) {
        return BasicApiFp(this.configuration).getLocationCity(body13, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取省、市、区、商圈数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getProvinces(options?: any) {
        return BasicApiFp(this.configuration).getProvinces(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取推荐关键字列表
     * @param {Body23} [body23] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getRecommandSearchTips(body23?: Body23, options?: any) {
        return BasicApiFp(this.configuration).getRecommandSearchTips(body23, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取区域商圈列表
     * @param {Body22} [body22] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getRegions(body22?: Body22, options?: any) {
        return BasicApiFp(this.configuration).getRegions(body22, options)(this.fetch, this.basePath);
    }

}

/**
 * ManagerApi - fetch parameter creator
 * @export
 */
export const ManagerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {Body41} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body41?: Body41, options: any = {}): FetchArgs {
            const localVarPath = `/manager/getCouponByMerchent`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body41" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body41 || {}) : (body41 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerApi - functional programming interface
 * @export
 */
export const ManagerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {Body41} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body41?: Body41, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20027> {
            const localVarFetchArgs = ManagerApiFetchParamCreator(configuration).getCouponByMerchent(body41, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ManagerApi - factory interface
 * @export
 */
export const ManagerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 根据店铺获取用户的优惠券
         * @param {Body41} [body41] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchent(body41?: Body41, options?: any) {
            return ManagerApiFp(configuration).getCouponByMerchent(body41, options)(fetch, basePath);
        },
    };
};

/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export class ManagerApi extends BaseAPI {
    /**
     * 
     * @summary 根据店铺获取用户的优惠券
     * @param {Body41} [body41] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public getCouponByMerchent(body41?: Body41, options?: any) {
        return ManagerApiFp(this.configuration).getCouponByMerchent(body41, options)(this.fetch, this.basePath);
    }

}

/**
 * MerchantApi - fetch parameter creator
 * @export
 */
export const MerchantApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端商家详情查询
         * @param {Body16} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body16?: Body16, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body16" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body16 || {}) : (body16 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {Body15} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body15?: Body15, options: any = {}): FetchArgs {
            const localVarPath = `/getAppMerchants`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body15" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body15 || {}) : (body15 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {Body12} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: Body12, options: any = {}): FetchArgs {
            const localVarPath = `/getCityCategories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body12" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body12 || {}) : (body12 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {Body9} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: Body9, options: any = {}): FetchArgs {
            const localVarPath = `/getCityRecommandCategories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body9" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body9 || {}) : (body9 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {Body18} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body18?: Body18, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantAttachments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body18" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body18 || {}) : (body18 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {Body17} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body17?: Body17, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDesc`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body17" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body17 || {}) : (body17 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {Body19} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body19?: Body19, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantDishes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body19" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body19 || {}) : (body19 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {Body20} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body20?: Body20, options: any = {}): FetchArgs {
            const localVarPath = `/getMerchantServices`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body20" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body20 || {}) : (body20 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApi - functional programming interface
 * @export
 */
export const MerchantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端商家详情查询
         * @param {Body16} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body16?: Body16, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2006> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getAppMerchantDetail(body16, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {Body15} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body15?: Body15, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getAppMerchants(body15, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {Body12} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: Body12, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCityCategories(body12, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {Body9} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: Body9, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getCityRecommandCategories(body9, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {Body18} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body18?: Body18, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantAttachments(body18, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {Body17} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body17?: Body17, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2007> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantDesc(body17, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {Body19} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body19?: Body19, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantDishes(body19, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {Body20} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body20?: Body20, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20010> {
            const localVarFetchArgs = MerchantApiFetchParamCreator(configuration).getMerchantServices(body20, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MerchantApi - factory interface
 * @export
 */
export const MerchantApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端商家详情查询
         * @param {Body16} [body16] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchantDetail(body16?: Body16, options?: any) {
            return MerchantApiFp(configuration).getAppMerchantDetail(body16, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端商家查询(根据条件查询店铺列表)
         * @param {Body15} [body15] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppMerchants(body15?: Body15, options?: any) {
            return MerchantApiFp(configuration).getAppMerchants(body15, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取城市全部（商家）分类
         * @param {Body12} [body12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityCategories(body12?: Body12, options?: any) {
            return MerchantApiFp(configuration).getCityCategories(body12, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取城市推荐（商家）分类
         * @param {Body9} [body9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityRecommandCategories(body9?: Body9, options?: any) {
            return MerchantApiFp(configuration).getCityRecommandCategories(body9, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家图片信息
         * @param {Body18} [body18] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantAttachments(body18?: Body18, options?: any) {
            return MerchantApiFp(configuration).getMerchantAttachments(body18, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家图文详情
         * @param {Body17} [body17] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDesc(body17?: Body17, options?: any) {
            return MerchantApiFp(configuration).getMerchantDesc(body17, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家菜品信息
         * @param {Body19} [body19] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantDishes(body19?: Body19, options?: any) {
            return MerchantApiFp(configuration).getMerchantDishes(body19, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商家服务信息
         * @param {Body20} [body20] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantServices(body20?: Body20, options?: any) {
            return MerchantApiFp(configuration).getMerchantServices(body20, options)(fetch, basePath);
        },
    };
};

/**
 * MerchantApi - object-oriented interface
 * @export
 * @class MerchantApi
 * @extends {BaseAPI}
 */
export class MerchantApi extends BaseAPI {
    /**
     * 
     * @summary APP端商家详情查询
     * @param {Body16} [body16] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getAppMerchantDetail(body16?: Body16, options?: any) {
        return MerchantApiFp(this.configuration).getAppMerchantDetail(body16, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端商家查询(根据条件查询店铺列表)
     * @param {Body15} [body15] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getAppMerchants(body15?: Body15, options?: any) {
        return MerchantApiFp(this.configuration).getAppMerchants(body15, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取城市全部（商家）分类
     * @param {Body12} [body12] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCityCategories(body12?: Body12, options?: any) {
        return MerchantApiFp(this.configuration).getCityCategories(body12, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取城市推荐（商家）分类
     * @param {Body9} [body9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getCityRecommandCategories(body9?: Body9, options?: any) {
        return MerchantApiFp(this.configuration).getCityRecommandCategories(body9, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家图片信息
     * @param {Body18} [body18] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantAttachments(body18?: Body18, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantAttachments(body18, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家图文详情
     * @param {Body17} [body17] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantDesc(body17?: Body17, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantDesc(body17, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家菜品信息
     * @param {Body19} [body19] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantDishes(body19?: Body19, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantDishes(body19, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商家服务信息
     * @param {Body20} [body20] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApi
     */
    public getMerchantServices(body20?: Body20, options?: any) {
        return MerchantApiFp(this.configuration).getMerchantServices(body20, options)(this.fetch, this.basePath);
    }

}

/**
 * OrderApi - fetch parameter creator
 * @export
 */
export const OrderApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {Body37} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body37?: Body37, options: any = {}): FetchArgs {
            const localVarPath = `/order/cancelOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body37" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body37 || {}) : (body37 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除订单
         * @param {Body36} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body36?: Body36, options: any = {}): FetchArgs {
            const localVarPath = `/order/deleteOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body36" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body36 || {}) : (body36 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/submitFreePlusOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {Body32} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body32?: Body32, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrderDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body32 || {}) : (body32 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {Body39} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body39?: Body39, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrderPayStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body39" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body39 || {}) : (body39 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {Body31} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body31?: Body31, options: any = {}): FetchArgs {
            const localVarPath = `/order/getOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body31" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body31 || {}) : (body31 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options: any = {}): FetchArgs {
            const localVarPath = `/order/getPayway`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {Body40} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body40?: Body40, options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/getPlusOrderPayStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body40" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body40 || {}) : (body40 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {Body33} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body33?: Body33, options: any = {}): FetchArgs {
            const localVarPath = `/order/getRefundDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body33" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body33 || {}) : (body33 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 退款列表
         * @param {Body35} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body35?: Body35, options: any = {}): FetchArgs {
            const localVarPath = `/order/getRefundList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body35" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body35 || {}) : (body35 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 预支付
         * @param {Body38} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body38?: Body38, options: any = {}): FetchArgs {
            const localVarPath = `/order/PrePay`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body38" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body38 || {}) : (body38 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 申请退款
         * @param {Body34} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body34?: Body34, options: any = {}): FetchArgs {
            const localVarPath = `/order/refund`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body34" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body34 || {}) : (body34 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options: any = {}): FetchArgs {
            const localVarPath = `/order/userPlusOrder/submitPlusOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BuyPlus" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(buyPlus || {}) : (buyPlus || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options: any = {}): FetchArgs {
            const localVarPath = `/order/submitProductOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmitProductOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(submitProductOrder || {}) : (submitProductOrder || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options: any = {}): FetchArgs {
            const localVarPath = `/order/submitOrder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmitOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(submitOrder || {}) : (submitOrder || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {Body37} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body37?: Body37, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).cancelOrder(body37, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除订单
         * @param {Body36} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body36?: Body36, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).deleteOrder(body36, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getFreePlus(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {Body32} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body32?: Body32, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrderDetail(body32, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {Body39} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body39?: Body39, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20023> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrderPayStatus(body39, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {Body31} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body31?: Body31, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrders(body31, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20026> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getPayway(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {Body40} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body40?: Body40, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20025> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getPlusOrderPayStatus(body40, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {Body33} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body33?: Body33, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20020> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getRefundDetail(body33, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 退款列表
         * @param {Body35} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body35?: Body35, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20021> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getRefundList(body35, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 预支付
         * @param {Body38} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body38?: Body38, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20022> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).prePay(body38, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 申请退款
         * @param {Body34} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body34?: Body34, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).refund(body34, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20024> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitPlusOrder(buyPlus, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20018> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitProductOrder(submitProductOrder, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20018> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).submitProductOrder_1(submitOrder, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 取消订单
         * @param {Body37} [body37] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(body37?: Body37, options?: any) {
            return OrderApiFp(configuration).cancelOrder(body37, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除订单
         * @param {Body36} [body36] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(body36?: Body36, options?: any) {
            return OrderApiFp(configuration).deleteOrder(body36, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交免费Plus订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFreePlus(options?: any) {
            return OrderApiFp(configuration).getFreePlus(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单详情
         * @param {Body32} [body32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderDetail(body32?: Body32, options?: any) {
            return OrderApiFp(configuration).getOrderDetail(body32, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单支付状态
         * @param {Body39} [body39] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderPayStatus(body39?: Body39, options?: any) {
            return OrderApiFp(configuration).getOrderPayStatus(body39, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取订单列表
         * @param {Body31} [body31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(body31?: Body31, options?: any) {
            return OrderApiFp(configuration).getOrders(body31, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取支付方式
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayway(options?: any) {
            return OrderApiFp(configuration).getPayway(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取购买Plus支付状态
         * @param {Body40} [body40] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusOrderPayStatus(body40?: Body40, options?: any) {
            return OrderApiFp(configuration).getPlusOrderPayStatus(body40, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取退款详情
         * @param {Body33} [body33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundDetail(body33?: Body33, options?: any) {
            return OrderApiFp(configuration).getRefundDetail(body33, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 退款列表
         * @param {Body35} [body35] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefundList(body35?: Body35, options?: any) {
            return OrderApiFp(configuration).getRefundList(body35, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 预支付
         * @param {Body38} [body38] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prePay(body38?: Body38, options?: any) {
            return OrderApiFp(configuration).prePay(body38, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 申请退款
         * @param {Body34} [body34] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(body34?: Body34, options?: any) {
            return OrderApiFp(configuration).refund(body34, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交Plus订单
         * @param {BuyPlus} [buyPlus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPlusOrder(buyPlus?: BuyPlus, options?: any) {
            return OrderApiFp(configuration).submitPlusOrder(buyPlus, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 提交商品订单
         * @param {SubmitProductOrder} [submitProductOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any) {
            return OrderApiFp(configuration).submitProductOrder(submitProductOrder, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 优惠买单
         * @param {SubmitOrder} [submitOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProductOrder_1(submitOrder?: SubmitOrder, options?: any) {
            return OrderApiFp(configuration).submitProductOrder_1(submitOrder, options)(fetch, basePath);
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary 取消订单
     * @param {Body37} [body37] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelOrder(body37?: Body37, options?: any) {
        return OrderApiFp(this.configuration).cancelOrder(body37, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除订单
     * @param {Body36} [body36] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public deleteOrder(body36?: Body36, options?: any) {
        return OrderApiFp(this.configuration).deleteOrder(body36, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交免费Plus订单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getFreePlus(options?: any) {
        return OrderApiFp(this.configuration).getFreePlus(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单详情
     * @param {Body32} [body32] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderDetail(body32?: Body32, options?: any) {
        return OrderApiFp(this.configuration).getOrderDetail(body32, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单支付状态
     * @param {Body39} [body39] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrderPayStatus(body39?: Body39, options?: any) {
        return OrderApiFp(this.configuration).getOrderPayStatus(body39, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取订单列表
     * @param {Body31} [body31] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrders(body31?: Body31, options?: any) {
        return OrderApiFp(this.configuration).getOrders(body31, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取支付方式
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPayway(options?: any) {
        return OrderApiFp(this.configuration).getPayway(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取购买Plus支付状态
     * @param {Body40} [body40] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPlusOrderPayStatus(body40?: Body40, options?: any) {
        return OrderApiFp(this.configuration).getPlusOrderPayStatus(body40, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取退款详情
     * @param {Body33} [body33] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getRefundDetail(body33?: Body33, options?: any) {
        return OrderApiFp(this.configuration).getRefundDetail(body33, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 退款列表
     * @param {Body35} [body35] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getRefundList(body35?: Body35, options?: any) {
        return OrderApiFp(this.configuration).getRefundList(body35, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 预支付
     * @param {Body38} [body38] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public prePay(body38?: Body38, options?: any) {
        return OrderApiFp(this.configuration).prePay(body38, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 申请退款
     * @param {Body34} [body34] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public refund(body34?: Body34, options?: any) {
        return OrderApiFp(this.configuration).refund(body34, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交Plus订单
     * @param {BuyPlus} [buyPlus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitPlusOrder(buyPlus?: BuyPlus, options?: any) {
        return OrderApiFp(this.configuration).submitPlusOrder(buyPlus, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 提交商品订单
     * @param {SubmitProductOrder} [submitProductOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitProductOrder(submitProductOrder?: SubmitProductOrder, options?: any) {
        return OrderApiFp(this.configuration).submitProductOrder(submitProductOrder, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 优惠买单
     * @param {SubmitOrder} [submitOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public submitProductOrder_1(submitOrder?: SubmitOrder, options?: any) {
        return OrderApiFp(this.configuration).submitProductOrder_1(submitOrder, options)(this.fetch, this.basePath);
    }

}

/**
 * ProductApi - fetch parameter creator
 * @export
 */
export const ProductApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {Body26} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body26?: Body26, options: any = {}): FetchArgs {
            const localVarPath = `/getProductBrief`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body26" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body26 || {}) : (body26 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {Body28} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body28?: Body28, options: any = {}): FetchArgs {
            const localVarPath = `/getProductContents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body28" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body28 || {}) : (body28 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {Body27} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body27?: Body27, options: any = {}): FetchArgs {
            const localVarPath = `/getProductDetail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body27" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body27 || {}) : (body27 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {Body25} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body25?: Body25, options: any = {}): FetchArgs {
            const localVarPath = `/getProducts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body25" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body25 || {}) : (body25 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {Body26} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body26?: Body26, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductBrief(body26, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {Body28} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body28?: Body28, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductContents(body28, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {Body27} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body27?: Body27, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductDetail(body27, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {Body25} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body25?: Body25, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20015> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProducts(body25, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary APP端获取商品简述
         * @param {Body26} [body26] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBrief(body26?: Body26, options?: any) {
            return ProductApiFp(configuration).getProductBrief(body26, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商品内容
         * @param {Body28} [body28] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductContents(body28?: Body28, options?: any) {
            return ProductApiFp(configuration).getProductContents(body28, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端获取商品详情
         * @param {Body27} [body27] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDetail(body27?: Body27, options?: any) {
            return ProductApiFp(configuration).getProductDetail(body27, options)(fetch, basePath);
        },
        /**
         * 
         * @summary APP端商品查询
         * @param {Body25} [body25] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(body25?: Body25, options?: any) {
            return ProductApiFp(configuration).getProducts(body25, options)(fetch, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary APP端获取商品简述
     * @param {Body26} [body26] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductBrief(body26?: Body26, options?: any) {
        return ProductApiFp(this.configuration).getProductBrief(body26, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商品内容
     * @param {Body28} [body28] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductContents(body28?: Body28, options?: any) {
        return ProductApiFp(this.configuration).getProductContents(body28, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端获取商品详情
     * @param {Body27} [body27] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductDetail(body27?: Body27, options?: any) {
        return ProductApiFp(this.configuration).getProductDetail(body27, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary APP端商品查询
     * @param {Body25} [body25] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProducts(body25?: Body25, options?: any) {
        return ProductApiFp(this.configuration).getProducts(body25, options)(this.fetch, this.basePath);
    }

}

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options: any = {}): FetchArgs {
            const localVarPath = `/user/addAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AddAddress" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(addAddress || {}) : (addAddress || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {Body30} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body30?: Body30, options: any = {}): FetchArgs {
            const localVarPath = `/bindMobile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body30" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body30 || {}) : (body30 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {Body6} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: Body6, options: any = {}): FetchArgs {
            const localVarPath = `/user/bindNewPhone`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body6" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body6 || {}) : (body6 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除地址
         * @param {Body4} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: Body4, options: any = {}): FetchArgs {
            const localVarPath = `/user/deleteAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body4" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body4 || {}) : (body4 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看地址
         * @param {Body3} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: Body3, options: any = {}): FetchArgs {
            const localVarPath = `/user/getAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body3" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body3 || {}) : (body3 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options: any = {}): FetchArgs {
            const localVarPath = `/user/getAddresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options: any = {}): FetchArgs {
            const localVarPath = `/user/userPlus/getPlusMemberType`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {Body10} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: Body10, options: any = {}): FetchArgs {
            const localVarPath = `/user/userPoint/getPointsList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body10" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body10 || {}) : (body10 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options: any = {}): FetchArgs {
            const localVarPath = `/user/getUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options: any = {}): FetchArgs {
            const localVarPath = `/app/getVerifyCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {Body11} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: Body11, options: any = {}): FetchArgs {
            const localVarPath = `/user/userPoint/increaseUserPoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body11" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body11 || {}) : (body11 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options: any = {}): FetchArgs {
            const localVarPath = `/app/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (UNKNOWN_BASE_TYPE || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options: any = {}): FetchArgs {
            const localVarPath = `/app/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {Body29} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body29?: Body29, options: any = {}): FetchArgs {
            const localVarPath = `/resetLoginPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body29" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body29 || {}) : (body29 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options: any = {}): FetchArgs {
            const localVarPath = `/user/sign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateAddress`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Address" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(address || {}) : (address || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {Body2} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: Body2, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateLoginPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body2" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body2 || {}) : (body2 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {Body1} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: Body1, options: any = {}): FetchArgs {
            const localVarPath = `/user/updateUserInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body1 || {}) : (body1 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {Body7} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: Body7, options: any = {}): FetchArgs {
            const localVarPath = `/user/uploadHeadImage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body7" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body7 || {}) : (body7 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {Body5} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: Body5, options: any = {}): FetchArgs {
            const localVarPath = `/user/verifyOldPhoneCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("userToken")
					: configuration.apiKey;
                localVarHeaderParameter["userToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body5" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body5 || {}) : (body5 || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).addAddress(addAddress, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {Body30} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body30?: Body30, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).bindMobile(body30, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {Body6} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: Body6, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).bindNewPhone(body6, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除地址
         * @param {Body4} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: Body4, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteAddress(body4, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 查看地址
         * @param {Body3} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: Body3, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAddress(body3, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getAddresses(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20016> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getPlusMemberType(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {Body10} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: Body10, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getPointsList(body10, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserInfo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getVerifyCode(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {Body11} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: Body11, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).increaseUserPoints(body11, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).login(UNKNOWN_BASE_TYPE, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).logout(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {Body29} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body29?: Body29, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).resetLoginPassword(body29, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).sign(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateAddress(address, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改密码
         * @param {Body2} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: Body2, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateLoginPassword(body2, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {Body1} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: Body1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUserInfo(body1, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {Body7} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: Body7, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).uploadHeadImage(body7, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {Body5} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: Body5, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmptyResult> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).verifyOldPhoneCode(body5, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 添加地址
         * @param {AddAddress} [addAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(addAddress?: AddAddress, options?: any) {
            return UserApiFp(configuration).addAddress(addAddress, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 绑定手机号码
         * @param {Body30} [body30] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindMobile(body30?: Body30, options?: any) {
            return UserApiFp(configuration).bindMobile(body30, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 绑定新手机号码
         * @param {Body6} [body6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindNewPhone(body6?: Body6, options?: any) {
            return UserApiFp(configuration).bindNewPhone(body6, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除地址
         * @param {Body4} [body4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(body4?: Body4, options?: any) {
            return UserApiFp(configuration).deleteAddress(body4, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 查看地址
         * @param {Body3} [body3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(body3?: Body3, options?: any) {
            return UserApiFp(configuration).getAddress(body3, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户所有地址
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(options?: any) {
            return UserApiFp(configuration).getAddresses(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取可开通Plus会员类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlusMemberType(options?: any) {
            return UserApiFp(configuration).getPlusMemberType(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取积分列表
         * @param {Body10} [body10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsList(body10?: Body10, options?: any) {
            return UserApiFp(configuration).getPointsList(body10, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options?: any) {
            return UserApiFp(configuration).getUserInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取验证码
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyCode(body?: Body, options?: any) {
            return UserApiFp(configuration).getVerifyCode(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 增加用户积分
         * @param {Body11} [body11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        increaseUserPoints(body11?: Body11, options?: any) {
            return UserApiFp(configuration).increaseUserPoints(body11, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户登录、注册
         * @param {any} [UNKNOWN_BASE_TYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(UNKNOWN_BASE_TYPE?: any, options?: any) {
            return UserApiFp(configuration).login(UNKNOWN_BASE_TYPE, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户退出登录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any) {
            return UserApiFp(configuration).logout(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 重置登录密码
         * @param {Body29} [body29] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetLoginPassword(body29?: Body29, options?: any) {
            return UserApiFp(configuration).resetLoginPassword(body29, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 用户签到
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sign(options?: any) {
            return UserApiFp(configuration).sign(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改地址
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(address?: Address, options?: any) {
            return UserApiFp(configuration).updateAddress(address, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改密码
         * @param {Body2} [body2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginPassword(body2?: Body2, options?: any) {
            return UserApiFp(configuration).updateLoginPassword(body2, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {Body1} [body1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfo(body1?: Body1, options?: any) {
            return UserApiFp(configuration).updateUserInfo(body1, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {Body7} [body7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHeadImage(body7?: Body7, options?: any) {
            return UserApiFp(configuration).uploadHeadImage(body7, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 验证旧手机验证码
         * @param {Body5} [body5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOldPhoneCode(body5?: Body5, options?: any) {
            return UserApiFp(configuration).verifyOldPhoneCode(body5, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 添加地址
     * @param {AddAddress} [addAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addAddress(addAddress?: AddAddress, options?: any) {
        return UserApiFp(this.configuration).addAddress(addAddress, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 绑定手机号码
     * @param {Body30} [body30] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindMobile(body30?: Body30, options?: any) {
        return UserApiFp(this.configuration).bindMobile(body30, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 绑定新手机号码
     * @param {Body6} [body6] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public bindNewPhone(body6?: Body6, options?: any) {
        return UserApiFp(this.configuration).bindNewPhone(body6, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除地址
     * @param {Body4} [body4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteAddress(body4?: Body4, options?: any) {
        return UserApiFp(this.configuration).deleteAddress(body4, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 查看地址
     * @param {Body3} [body3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAddress(body3?: Body3, options?: any) {
        return UserApiFp(this.configuration).getAddress(body3, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户所有地址
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAddresses(options?: any) {
        return UserApiFp(this.configuration).getAddresses(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取可开通Plus会员类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPlusMemberType(options?: any) {
        return UserApiFp(this.configuration).getPlusMemberType(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取积分列表
     * @param {Body10} [body10] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPointsList(body10?: Body10, options?: any) {
        return UserApiFp(this.configuration).getPointsList(body10, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfo(options?: any) {
        return UserApiFp(this.configuration).getUserInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取验证码
     * @param {Body} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getVerifyCode(body?: Body, options?: any) {
        return UserApiFp(this.configuration).getVerifyCode(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 增加用户积分
     * @param {Body11} [body11] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public increaseUserPoints(body11?: Body11, options?: any) {
        return UserApiFp(this.configuration).increaseUserPoints(body11, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户登录、注册
     * @param {any} [UNKNOWN_BASE_TYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public login(UNKNOWN_BASE_TYPE?: any, options?: any) {
        return UserApiFp(this.configuration).login(UNKNOWN_BASE_TYPE, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户退出登录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logout(options?: any) {
        return UserApiFp(this.configuration).logout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 重置登录密码
     * @param {Body29} [body29] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetLoginPassword(body29?: Body29, options?: any) {
        return UserApiFp(this.configuration).resetLoginPassword(body29, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 用户签到
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sign(options?: any) {
        return UserApiFp(this.configuration).sign(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改地址
     * @param {Address} [address] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateAddress(address?: Address, options?: any) {
        return UserApiFp(this.configuration).updateAddress(address, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改密码
     * @param {Body2} [body2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateLoginPassword(body2?: Body2, options?: any) {
        return UserApiFp(this.configuration).updateLoginPassword(body2, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 修改用户信息
     * @param {Body1} [body1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserInfo(body1?: Body1, options?: any) {
        return UserApiFp(this.configuration).updateUserInfo(body1, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 更新用户头像
     * @param {Body7} [body7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public uploadHeadImage(body7?: Body7, options?: any) {
        return UserApiFp(this.configuration).uploadHeadImage(body7, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 验证旧手机验证码
     * @param {Body5} [body5] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public verifyOldPhoneCode(body5?: Body5, options?: any) {
        return UserApiFp(this.configuration).verifyOldPhoneCode(body5, options)(this.fetch, this.basePath);
    }

}

